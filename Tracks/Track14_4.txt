Descriptiom:
The program runs several checks to detect a debugging environment. If running into gdb, every test should FAIL. 
Patch the program to obtain PASS in every check even when running into gbd


Solution:


Trying with gdb obv it will fails the tests

(gdb) c
Continuing.
Available tests:
----------------

    0x00000001: env

        Application checks existence of LINES and COLUMNS
        environment variables.

    0x00000002: ptrace

        Application tries to debug itself by calling
        ptrace(PTRACE_TRACEME, ...)

    0x00000004: vdso

        Application measures distance of vdso and stack.

    0x00000008: noaslr

        Application checks base address of ELF and shared
        libraries for hard-coded values used by GDB.

    0x00000010: parent

        Application checks whether parent's name is gdb,
        strace or ltrace.

    0x00000020: nearheap

        Application compares beginning of the heap to
        address of own BSS.

Use a hexadecimal value representing a bitmap to select tests in argv[1] (default 0xffffffff).

Test results:
-------------
      ptrace: FAIL
        vdso: FAIL
      noaslr: FAIL
         env: FAIL
      parent: FAIL
      ldhook: FAIL
    nearheap: FAIL

[Inferior 1 (process 7552) exited normally]



Opening in IDA to patch 

Un’idea delle modifiche completa sta dal buon Augusto:
https://github.com/augustozanellato/Cybersec2021/tree/master/20211119_Debugging/4_debugmenot 
Non ha scritto dove vengono fatte purtroppo, ma per logica vengono fatte tutte dentro le funzioni detect.
Si segua precisamente questo ordine.

Modifiche da fare (usare nella Hex View la shortcut ALT+B, selezionare “Find all Occurrences” e operare tutte le sostituzioni delle sequenze di byte listate):

- 74 15 diventa 74 13 (je 199c diventa 1e 199a , la sola occorrenza in detect)    
 
 //jz      short loc_199C on IDA            Function Detect
 
- I vari b8 01 00 00 00 diventano b8 00 00 00 00 (mov 0x1, eax diventa mov 0x0, eax) dentro detect_0 e detect_1, totale 2 occorrenze)

// loc_1ADB:   Detect_0
//     mov     eax, 1


//loc_1C56:    Detect_1
// 	mov     eax, 1

- 0f 46 c2 diventa 31 c0 90 (cmovbe edx, eax diventa [xor eax, eax & nop] (sola occorrenza dentro detect 0)

//loc_1B00:
lea     rdx, [rbp+var_20]
cmp     rdx, rbx
mov     edx, 0
cmovbe  eax, edx                           //0f 46 c2
jmp     short loc_1AE0
//
// xor eax, eax == 0


- La prima 41 0f 44 c5 diventa 31 c0 90 90  (cmove  %r13d,%eax diventa [xor eax, eax & nop & nop]) si trova dentro detect_1

//and     ebx, 0FFF00000h
add     rdx, 4CC60000h
cmp     rbx, rdx
cmovz   eax, r13d           //41 0f 44 c5
jmp     loc_1C5B
//

- La seconda 41 0f 44 c5 diventa 0f 44 c0 90 (cmove  %r13d,%eax diventa [move %eax,%eax & nop]) si trova sempre dentro detect_1

//and     ebx, 0FFF00000h
mov     edx, 0F7F00000h
cmp     rbx, rdx
cmovz   eax, r13d            //41 0f 44 c5
jmp     loc_1C5B
//

- I vari 01 c0 diventano 31 c0 (add eax, eax diventa xor eax, eax) (tre occorrenze in detect_1 e in detect_5)

//and     ebx, 0FFF00000h
xor     eax, eax
cmp     rbx, 76F00000h
setz    al
add     eax, eax         //01 c0
jmp     loc_1C5B
//

//and     ebx, 0FFF00000h
mov     edx, 0B7F00000h
xor     eax, eax
cmp     rbx, rdx
setz    al
add     eax, eax       //01 c0
jmp     loc_1C5B
//

//detect_5 proc near

var_8= qword ptr -8

; __unwind {
endbr64
push    rbp
mov     edi, 10h        ; size
mov     rbp, rsp
sub     rsp, 10h
mov     rax, fs:28h
mov     [rbp+var_8], rax
xor     eax, eax
call    cs:malloc_ptr
lea     rsi, bss_4096
mov     rdi, rax
db      67h
call    __subvdi3
cmp     rax, 20000h
setle   al
movzx   eax, al
add     eax, eax                       //01 c0
mov     rdx, [rbp+var_8]
xor     rdx, fs:28h
jnz     short loc_24A5
//

- b8 02 00 00 00 diventa b8 00 00 00 00 (mov 0x2, eax diventa mov 0x0, eax) (una sola sequenza, dentro detect_2)

//loc_1EFD:
mov     eax, 2
//

- 44 89 e8   diventa 31 c0 90  (mov    r13d,eax diventa [xor eax, eax & nop], dentro detect_3

//add     rsp, 118h
mov     eax, r13d          //44 89 e8
pop     rbx 
pop     r12
pop     r13
pop     rbp
retn
//

- ba 02 00 00 00  diventa ba 00 00 00 00  (mov  0x2,edx diventa mov 0x0, edx) dentro detect_4

//detect_4 proc near

var_8= qword ptr -8

; __unwind {
endbr64
push    rbp
lea     rcx, arch_ret_ldhook
lea     rdx, arch_ret_len_ldhook
mov     rbp, rsp
sub     rsp, 10h
mov     rax, fs:28h
mov     [rbp+var_8], rax
xor     eax, eax
lea     rax, this_arch
mov     eax, [rax]
mov     rdx, [rdx+rax*8] ; n
mov     rsi, [rcx+rax*8] ; s2
mov     rax, cs:_r_debug_ptr
mov     rdi, [rax+10h]  ; s1
call    cs:memcmp_ptr
mov     edx, 2            //ba 02
test    eax, eax
cmovnz  eax, edx
mov     rcx, [rbp+var_8]
xor     rcx, fs:28h
jnz     short loc_2376
//


Un totale di 13 cambiamenti (23 patch totali). Si nota sia eseguendo il file con/senza debugger che funziona passando tutti i controlli se fatto esattamente in questa maniera. Altrimenti, riprendere l’eseguibile sano e riprovare.



Breakpoint 1, 0x0000555555555078 in main ()
(gdb) c
Continuing.
Available tests:
----------------

    0x00000001: env

        Application checks existence of LINES and COLUMNS
        environment variables.

    0x00000002: ptrace

        Application tries to debug itself by calling
        ptrace(PTRACE_TRACEME, ...)

    0x00000004: vdso

        Application measures distance of vdso and stack.

    0x00000008: noaslr

        Application checks base address of ELF and shared
        libraries for hard-coded values used by GDB.

    0x00000010: parent

        Application checks whether parent's name is gdb,
        strace or ltrace.

    0x00000020: nearheap

        Application compares beginning of the heap to
        address of own BSS.

Use a hexadecimal value representing a bitmap to select tests in argv[1] (default 0xffffffff).

Test results:
-------------
      ptrace: PASS
        vdso: FAIL
      noaslr: PASS
         env: PASS
      parent: PASS
      ldhook: PASS
    nearheap: PASS

[Inferior 1 (process 4088) exited normally]

