Opened ./run on IDA


; Attributes: bp-based frame

; int __fastcall main(int argc, const char **argv, const char **envp)
public main
main proc near

var_10= qword ptr -10h
var_4= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 10h
mov     [rbp+var_4], edi
mov     [rbp+var_10], rsi
mov     rax, cs:stdout@@GLIBC_2_2_5
mov     ecx, 0          ; n
mov     edx, 2          ; modes
mov     esi, 0          ; buf
mov     rdi, rax        ; stream
call    _setvbuf
mov     edi, offset aDecryptingTheF ; "Decrypting the Flag into global variabl"...
call    _puts
mov     eax, 0
call    decrypt_flag                                                  //Here's our target
mov     edi, offset aFinishedReadin ; "Finished Reading Flag into global varia"...
call    _puts
mov     eax, 0
leave
retn
; } // starts at 4008C9
main endp


Using gdb we can disassemble decrypt_flag to understand what It does:

(gdb) disassemble decrypt_flag 
Dump of assembler code for function decrypt_flag:
   0x0000000000400786 <+0>:	push   %rbp
   0x0000000000400787 <+1>:	mov    %rsp,%rbp
   0x000000000040078a <+4>:	sub    $0x30,%rsp
   0x000000000040078e <+8>:	mov    %fs:0x28,%rax
   0x0000000000400797 <+17>:	mov    %rax,-0x8(%rbp)
   0x000000000040079b <+21>:	xor    %eax,%eax
   0x000000000040079d <+23>:	mov    $0x2f,%edi
   0x00000000004007a2 <+28>:	call   0x400640 <malloc@plt>
   0x00000000004007a7 <+33>:	mov    %rax,0x200c3a(%rip)        # 0x6013e8 <flag_buf>
   0x00000000004007ae <+40>:	mov    0x200c33(%rip),%rax        # 0x6013e8 <flag_buf>
   0x00000000004007b5 <+47>:	test   %rax,%rax
   0x00000000004007b8 <+50>:	jne    0x4007ce <decrypt_flag+72>
   0x00000000004007ba <+52>:	mov    $0x4009a8,%edi
   0x00000000004007bf <+57>:	call   0x400600 <puts@plt>
   0x00000000004007c4 <+62>:	mov    $0xffffffff,%edi
   0x00000000004007c9 <+67>:	call   0x400660 <exit@plt>
   0x00000000004007ce <+72>:	movb   $0x0,-0xe(%rbp)
   0x00000000004007d2 <+76>:	movl   $0x2,-0x24(%rbp)
   0x00000000004007d9 <+83>:	movl   $0x0,-0x20(%rbp)
   0x00000000004007e0 <+90>:	movl   $0x0,-0x1c(%rbp)
   0x00000000004007e7 <+97>:	jmp    0x400889 <decrypt_flag+259>
   0x00000000004007ec <+102>:	mov    $0x2e,%edi
--Type <RET> for more, q to quit, c to continue without paging--c
   0x00000000004007f1 <+107>:	call   0x4005f0 <putchar@plt>
   0x00000000004007f6 <+112>:	mov    $0x3d090,%edi
   0x00000000004007fb <+117>:	mov    $0x0,%eax
   0x0000000000400800 <+122>:	call   0x400670 <usleep@plt>
   0x0000000000400805 <+127>:	mov    -0x1c(%rbp),%eax
   0x0000000000400808 <+130>:	cltq
   0x000000000040080a <+132>:	movzbl 0x601080(%rax),%eax
   0x0000000000400811 <+139>:	mov    %al,-0x10(%rbp)
   0x0000000000400814 <+142>:	movzbl -0x10(%rbp),%eax
   0x0000000000400818 <+146>:	cmp    $0x30,%al
   0x000000000040081a <+148>:	jne    0x400834 <decrypt_flag+174>
   0x000000000040081c <+150>:	mov    -0x1c(%rbp),%eax
   0x000000000040081f <+153>:	add    $0x1,%eax
   0x0000000000400822 <+156>:	cltq
   0x0000000000400824 <+158>:	movzbl 0x601080(%rax),%eax
   0x000000000040082b <+165>:	mov    %al,-0x10(%rbp)
   0x000000000040082e <+168>:	movb   $0x0,-0xf(%rbp)
   0x0000000000400832 <+172>:	jmp    0x400846 <decrypt_flag+192>
   0x0000000000400834 <+174>:	mov    -0x1c(%rbp),%eax
   0x0000000000400837 <+177>:	add    $0x1,%eax
   0x000000000040083a <+180>:	cltq
   0x000000000040083c <+182>:	movzbl 0x601080(%rax),%eax
   0x0000000000400843 <+189>:	mov    %al,-0xf(%rbp)
   0x0000000000400846 <+192>:	lea    -0x10(%rbp),%rax
   0x000000000040084a <+196>:	mov    $0x10,%edx
   0x000000000040084f <+201>:	mov    $0x0,%esi
   0x0000000000400854 <+206>:	mov    %rax,%rdi
   0x0000000000400857 <+209>:	call   0x400630 <strtol@plt>
   0x000000000040085c <+214>:	mov    %rax,-0x18(%rbp)
   0x0000000000400860 <+218>:	mov    0x200b81(%rip),%rdx        # 0x6013e8 <flag_buf>
   0x0000000000400867 <+225>:	mov    -0x20(%rbp),%eax
   0x000000000040086a <+228>:	cltq
   0x000000000040086c <+230>:	add    %rdx,%rax
   0x000000000040086f <+233>:	mov    -0x18(%rbp),%rdx
   0x0000000000400873 <+237>:	add    $0x2b,%edx
   0x0000000000400876 <+240>:	mov    %dl,(%rax)
   0x0000000000400878 <+242>:	addl   $0x1,-0x20(%rbp)
   0x000000000040087c <+246>:	addl   $0x1,-0x24(%rbp)
   0x0000000000400880 <+250>:	mov    -0x24(%rbp),%eax
   0x0000000000400883 <+253>:	add    $0x2,%eax
   0x0000000000400886 <+256>:	add    %eax,-0x1c(%rbp)
   0x0000000000400889 <+259>:	cmpl   $0x352,-0x1c(%rbp)
   0x0000000000400890 <+266>:	jle    0x4007ec <decrypt_flag+102>
   0x0000000000400896 <+272>:	mov    0x200b4b(%rip),%rdx        # 0x6013e8 <flag_buf>
   0x000000000040089d <+279>:	mov    -0x20(%rbp),%eax
   0x00000000004008a0 <+282>:	cltq
   0x00000000004008a2 <+284>:	add    %rdx,%rax
   0x00000000004008a5 <+287>:	movb   $0x0,(%rax)
   0x00000000004008a8 <+290>:	mov    $0xa,%edi
   0x00000000004008ad <+295>:	call   0x4005f0 <putchar@plt>                   //here I noticed that <putchar@plt> is the only "output" function inside decrypt_flag
   0x00000000004008b2 <+300>:	nop
   0x00000000004008b3 <+301>:	mov    -0x8(%rbp),%rax
   0x00000000004008b7 <+305>:	xor    %fs:0x28,%rax
   0x00000000004008c0 <+314>:	je     0x4008c7 <decrypt_flag+321>
   0x00000000004008c2 <+316>:	call   0x400610 <__stack_chk_fail@plt>
   0x00000000004008c7 <+321>:	leave
   0x00000000004008c8 <+322>:	ret
End of assembler dump.



So, I wanna now what it's outputted Here (i). To do that, we'll need to grab the Address of the prev. mov instruction (i-1) and add an breakpoint ptr (b*), and than see what's in his registers.

(gdb) break* 0x00000000004008a8
Breakpoint 2 at 0x4008a8


(gdb) r                         //==run 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/tuba/Desktop/CTFS/Challenges14/Challenges/2_learn_gdb/run 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, 0x00000000004008cd in main ()
(gdb) c
Continuing.
Decrypting the Flag into global variable 'flag_buf'
.....................................
Breakpoint 2, 0x00000000004008a8 in decrypt_flag () 

It hitted our breakpoint, so now we can check the content of registers

(gdb) info registers 
rax            0x6022c5            6300357
rbx            0x7fffffffdf58      140737488346968
rcx            0x7fffffffde12      140737488346642
rdx            0x6022a0            6300320
rsi            0x52                82
rdi            0x10                16
rbp            0x7fffffffde20      0x7fffffffde20
rsp            0x7fffffffddf0      0x7fffffffddf0
r8             0xfffffffffffffff   1152921504606846975
r9             0x0                 0
...

Now we can 

(gdb) x/s (char*) flag_buf 
0x6022a0:	"picoCTF{gDb_iS_sUp3r_u53fuL_f3f39814}"   


TOUNDERSTAND









