./escapePrison 


      ██▓███   ██▀███   ██▓  ██████  ▒█████   ███▄    █ 
     ▓██░  ██▒▓██ ▒ ██▒▓██▒▒██    ▒ ▒██▒  ██▒ ██ ▀█   █ 
     ▓██░ ██▓▒▓██ ░▄█ ▒▒██▒░ ▓██▄   ▒██░  ██▒▓██  ▀█ ██▒
     ▒██▄█▓▒ ▒▒██▀▀█▄  ░██░  ▒   ██▒▒██   ██░▓██▒  ▐▌██▒
     ▒██▒ ░  ░░██▓ ▒██▒░██░▒██████▒▒░ ████▓▒░▒██░   ▓██░
     ▒▓▒░ ░  ░░ ▒▓ ░▒▓░░▓  ▒ ▒▓▒ ▒ ░░ ▒░▒░▒░ ░ ▒░   ▒ ▒ 
     ░▒ ░       ░▒ ░ ▒░ ▒ ░░ ░▒  ░ ░  ░ ▒ ▒░ ░ ░░   ░ ▒░
     ░░         ░░   ░  ▒ ░░  ░  ░  ░ ░ ░ ▒     ░   ░ ░ 
                 ░      ░        ░      ░ ░           ░ 


You are unjustly locked up in the Green Dolphin prison... You must escape as soon as possible or you will die.
I Hope you have a good plan!
What is your idea to escape?

If we open in IDA, will see:


lea     rdi, aWhatIsYourIdea ; "What is your idea to escape?"    //allocating mem for this msg
call    _puts                                           //displays it on screen
lea     rax, [rbp+s1]                            
mov     rdi, rax
mov     eax, 0
call    _gets                                       //calls for UserInput(s1)
lea     rax, [rbp+s1]                               //allocate mem for the UserInput
lea     rsi, s2         ; "Disguise as the guard Mark!"           //allocation mem for the correct ans(s2)
mov     rdi, rax        ; s1                     
call    _strcmp                                      //compare UserInput(s1) vs correct ans(s2)
test    eax, eax                                   
jz      short loc_401C31                    

If they are the same, the ZeroFlag is set to 1. Now when the jz instruction (JumpZero/JumpIfZero) search for the ZF, it will see that is set to 1, so Jump to loc_401C31


Next Block: 
loc_401C31


call    _gets                   //UserInput asked
lea     rax, [rbp+var_40]       //array for input
mov     rdi, rax
call    string_rev                   //called a string_reverse fucntion
lea     rsi, aNwadTa    ; "nwad tA"           //laod mem for the s2 
mov     rdi, rax        ; s1                
call    _strcmp                    //compare s1(UserInput) and s2
test    eax, eax
jz      short loc_401CC1         //same as before


In string_rev:

call    _strlen
mov     [rbp+var_8], eax               //Lenght of str  var_8 = lengthStr
mov     [rbp+var_C], 0                 //Var_C == 0
jmp     short loc_40197F


loc_40197F:
mov     eax, [rbp+var_8]     //eax == str.length  
mov     edx, eax            //edx = str.length*2
shr     edx, 1Fh               //Shifts 31 bits to the right of edx
add     eax, edx         //(eax=7)==edx
sar     eax, 1       //shifts 1 bit right    
cmp     [rbp+var_C], eax          //compares 0 == eax
jl      short loc_401928          

To reverse it, I have to:

I. eax >=0
II. eax -> 1 shift left
III. edx -= eax.str.lenght
IV. edx -> 31 shifts to left
V. edx/2

01101110 01110111 01100001 01100100 00100000 01110100 01000001 == nwad tA



