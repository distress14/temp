file bomb

bomb: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=11c83ac9c51d3036cf2669235060f17e2cd0400b, with debug_info, not stripped


gdb bomb
disassemble main


IDA

Main. 6 Phases

Phase 1:

public phase_1
phase_1 proc near
; __unwind {
sub     rsp, 8
mov     esi, offset aBorderRelation ; "Border relations with Canada have never"...
call    strings_not_equal
test    eax, eax
jz     short loc_400EF7

That's a comparison between two eax, so we need to
Change JumpEqual (or JumpIfZero) in JumpNotEqual to Reversit.
Into Hex Editor, change 74 with 75 hex

Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Testetstetst
Phase 1 defused. How about the next one?

Phase 2:

public phase_2
phase_2 proc near

var_38= dword ptr -38h
var_34= byte ptr -34h
var_20= byte ptr -20h

; __unwind {
push    rbp
push    rbx
sub     rsp, 28h
mov     rsi, rsp
call    read_six_numbers
cmp     [rsp+38h+var_38], 1
jz      short loc_400F30

Same cmp, between 6 digit numbers (input user) + something and 1
change JZ into JNZ (74->75)

[
loc_400F17:
mov     eax, [rbx-4]
add     eax, eax
cmp     [rbx], eax
jz      short loc_400F25

Defuse function is called: EB 0C
Defuse function starts: 48 83 C4 28

I try something

Change the jump address but result in error
]

Back to work

loc_400F17:
mov     eax, [rbx-4]
add     eax, eax
cmp     [rbx], eax
jz      short loc_400F25

Here the same, Jz -> JnZ (74->75)

loc_400F25:
add     rbx, 4
cmp     rbx, rbp
jnz      short loc_400F17

Here Jnz -> Jz (75->74)

Not working


(gdb) disassemble main
Dump of assembler code for function main:
   0x0000000000400da0 <+0>:	push   %rbx
   0x0000000000400da1 <+1>:	cmp    $0x1,%edi
   0x0000000000400da4 <+4>:	jne    0x400db6 <main+22>
   0x0000000000400da6 <+6>:	mov    0x20299b(%rip),%rax        # 0x603748 <stdin@@GLIBC_2.2.5>
   0x0000000000400dad <+13>:	mov    %rax,0x2029b4(%rip)        # 0x603768 <infile>
   0x0000000000400db4 <+20>:	jmp    0x400e19 <main+121>
   0x0000000000400db6 <+22>:	mov    %rsi,%rbx
   0x0000000000400db9 <+25>:	cmp    $0x2,%edi
   0x0000000000400dbc <+28>:	jne    0x400df8 <main+88>
   0x0000000000400dbe <+30>:	mov    0x8(%rsi),%rdi
   0x0000000000400dc2 <+34>:	mov    $0x4022b4,%esi
   0x0000000000400dc7 <+39>:	call   0x400c10 <fopen@plt>
   0x0000000000400dcc <+44>:	mov    %rax,0x202995(%rip)        # 0x603768 <infile>
   0x0000000000400dd3 <+51>:	test   %rax,%rax
   0x0000000000400dd6 <+54>:	jne    0x400e19 <main+121>
   0x0000000000400dd8 <+56>:	mov    0x8(%rbx),%rcx
   0x0000000000400ddc <+60>:	mov    (%rbx),%rdx
   0x0000000000400ddf <+63>:	mov    $0x4022b6,%esi
   0x0000000000400de4 <+68>:	mov    $0x1,%edi
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400de9 <+73>:	call   0x400c00 <__printf_chk@plt>
   0x0000000000400dee <+78>:	mov    $0x8,%edi
   0x0000000000400df3 <+83>:	call   0x400c20 <exit@plt>
   0x0000000000400df8 <+88>:	mov    (%rsi),%rdx
   0x0000000000400dfb <+91>:	mov    $0x4022d3,%esi
   0x0000000000400e00 <+96>:	mov    $0x1,%edi
   0x0000000000400e05 <+101>:	mov    $0x0,%eax
   0x0000000000400e0a <+106>:	call   0x400c00 <__printf_chk@plt>
   0x0000000000400e0f <+111>:	mov    $0x8,%edi
   0x0000000000400e14 <+116>:	call   0x400c20 <exit@plt>
   0x0000000000400e19 <+121>:	call   0x4013a2 <initialize_bomb>
   0x0000000000400e1e <+126>:	mov    $0x402338,%edi
   0x0000000000400e23 <+131>:	call   0x400b10 <puts@plt>
   0x0000000000400e28 <+136>:	mov    $0x402378,%edi
   0x0000000000400e2d <+141>:	call   0x400b10 <puts@plt>
   0x0000000000400e32 <+146>:	call   0x40149e <read_line>
   0x0000000000400e37 <+151>:	mov    %rax,%rdi
   0x0000000000400e3a <+154>:	call   0x400ee0 <phase_1>
   0x0000000000400e3f <+159>:	call   0x4015c4 <phase_defused>
   0x0000000000400e44 <+164>:	mov    $0x4023a8,%edi
   0x0000000000400e49 <+169>:	call   0x400b10 <puts@plt>
   0x0000000000400e4e <+174>:	call   0x40149e <read_line>
   0x0000000000400e53 <+179>:	mov    %rax,%rdi
   0x0000000000400e56 <+182>:	call   0x400efc <phase_2>
   0x0000000000400e5b <+187>:	call   0x4015c4 <phase_defused>
   0x0000000000400e60 <+192>:	mov    $0x4022ed,%edi
   0x0000000000400e65 <+197>:	call   0x400b10 <puts@plt>
   0x0000000000400e6a <+202>:	call   0x40149e <read_line>
   0x0000000000400e6f <+207>:	mov    %rax,%rdi
   0x0000000000400e72 <+210>:	call   0x400f43 <phase_3>
   0x0000000000400e77 <+215>:	call   0x4015c4 <phase_defused>
   0x0000000000400e7c <+220>:	mov    $0x40230b,%edi
   0x0000000000400e81 <+225>:	call   0x400b10 <puts@plt>
   0x0000000000400e86 <+230>:	call   0x40149e <read_line>
   0x0000000000400e8b <+235>:	mov    %rax,%rdi
   0x0000000000400e8e <+238>:	call   0x40100c <phase_4>
   0x0000000000400e93 <+243>:	call   0x4015c4 <phase_defused>
   0x0000000000400e98 <+248>:	mov    $0x4023d8,%edi
   0x0000000000400e9d <+253>:	call   0x400b10 <puts@plt>
   0x0000000000400ea2 <+258>:	call   0x40149e <read_line>
   0x0000000000400ea7 <+263>:	mov    %rax,%rdi
   0x0000000000400eaa <+266>:	call   0x401062 <phase_5>
   0x0000000000400eaf <+271>:	call   0x4015c4 <phase_defused>
   0x0000000000400eb4 <+276>:	mov    $0x40231a,%edi
   0x0000000000400eb9 <+281>:	call   0x400b10 <puts@plt>
   0x0000000000400ebe <+286>:	call   0x40149e <read_line>
   0x0000000000400ec3 <+291>:	mov    %rax,%rdi
   0x0000000000400ec6 <+294>:	call   0x4010f4 <phase_6>
   0x0000000000400ecb <+299>:	call   0x4015c4 <phase_defused>
   0x0000000000400ed0 <+304>:	mov    $0x0,%eax
   0x0000000000400ed5 <+309>:	pop    %rbx
   0x0000000000400ed6 <+310>:	ret
End of assembler dump.



I want to end here: 0x0000000000400ecb

(gdb) disassemble phase_2 
Dump of assembler code for function phase_2:
   0x0000000000400efc <+0>:	push   %rbp
   0x0000000000400efd <+1>:	push   %rbx
   0x0000000000400efe <+2>:	sub    $0x28,%rsp
   0x0000000000400f02 <+6>:	mov    %rsp,%rsi
   0x0000000000400f05 <+9>:	call   0x40145c <read_six_numbers>
   0x0000000000400f0a <+14>:	cmpl   $0x1,(%rsp)
   0x0000000000400f0e <+18>:	je     0x400f30 <phase_2+52>
   0x0000000000400f10 <+20>:	call   0x40143a <explode_bomb>
   0x0000000000400f15 <+25>:	jmp    0x400f30 <phase_2+52>
   0x0000000000400f17 <+27>:	mov    -0x4(%rbx),%eax
   0x0000000000400f1a <+30>:	add    %eax,%eax
   0x0000000000400f1c <+32>:	cmp    %eax,(%rbx)
   0x0000000000400f1e <+34>:	je     0x400f25 <phase_2+41>
   0x0000000000400f20 <+36>:	call   0x40143a <explode_bomb>
   0x0000000000400f25 <+41>:	add    $0x4,%rbx
   0x0000000000400f29 <+45>:	cmp    %rbp,%rbx
   0x0000000000400f2c <+48>:	jne    0x400f17 <phase_2+27>
   0x0000000000400f2e <+50>:	jmp    0x400f3c <phase_2+64>
   0x0000000000400f30 <+52>:	lea    0x4(%rsp),%rbx
   0x0000000000400f35 <+57>:	lea    0x18(%rsp),%rbp
   0x0000000000400f3a <+62>:	jmp    0x400f17 <phase_2+27>
   0x0000000000400f3c <+64>:	add    $0x28,%rsp
   0x0000000000400f40 <+68>:	pop    %rbx
   0x0000000000400f41 <+69>:	pop    %rbp
   0x0000000000400f42 <+70>:	ret
End of assembler dump.


(gdb) x/2x 0x0000000000400f0a 
	(0x0000000000400f0e <+18>:	je     0x400f30 <phase_2+52>)
	
0x400f0a <phase_2+14>:	0x01243c83	0x25e82074

Next Instruction at: 0x0000000000400f10
Offset of the next Instruction: 0x25e82074


DstAddr = NextI (affianco (+1)) - OffsetI

Modifing the Offset, I could go wherevere I want, so I try

Offset = DestAddr - NextI 

x = 0x0000000000400ecb - 0x0000000000400f10




Phase2 Exercice book

1 2 4 8 16 32



Phase 3

public phase_3
phase_3 proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch

; __unwind {
sub     rsp, 18h
lea     rcx, [rsp+18h+var_C]
lea     rdx, [rsp+18h+var_10]
mov     esi, offset aDD ; "%d %d"
mov     eax, 0
call    ___isoc99_sscanf
cmp     eax, 1
jg      short loc_400F6A

"%d %d" == Mi aspetto 2 interi in input (var_10 e var_C)

lea     rcx, [rsp+18h+var_C]
lea     rdx, [rsp+18h+var_10]

loc_400F6A:             ; switch 8 cases
cmp     [rsp+18h+var_10], 7
ja      short def_400F75 ; jumptable 0000000000400F75 default case

Ja = Jump if Above

Viene eseguita una comparazione tra il primo input dell'utente e 7. Se L'UserInput > 7, la bomba esploderà andando nel caso di default.

loc_400FBE:
cmp     eax, [rsp+18h+var_C]
jz      short loc_400FC9


Dopo i vari casi, c'è una altra comparazione tra eax e il secondo UserInput.

Eax varia a seconda del case in cui entriamo, ma è una semplice assegnazione:

loc_400F8A:             ; jumptable 0000000000400F75 case 3
mov     eax, 100h
jmp     short loc_400FBE


Quindi il primo UserInput è la scelta dello switch (0-6)
Il secondo UserInput è il numero Hex (da convertire) nell'assegnazione dello switch case scelto

Esempi:

0 207
2 707
3 256
4 389
..


Phase4:

Di nuovo 2 input, C e var10

public phase_4
phase_4 proc near

var_10= dword ptr -10h
var_C= dword ptr -0Ch

; __unwind {
sub     rsp, 18h
lea     rcx, [rsp+18h+var_C]
lea     rdx, [rsp+18h+var_10]
mov     esi, offset aDD ; "%d %d"   == due interi in input
mov     eax, 0
call    ___isoc99_sscanf
cmp     eax, 2
jnz     short loc_401035


cmp     [rsp+18h+var_C], 0
jz      short loc_40105D

VarC == 0
